module mux81(i, s, y);
input [7:0] i;
input [2:0]s;
output reg y;
always @ (s or i)
begin
case (s)
3' b 000: y = i [0];
3' b001:y=i[1];
3' b 010:y = i[2];
3'b011:y-iB3]:
3'b 100:y= i [4];
3'b 101:y =i [5];
3' b 110:y = i[6];
3'b 1l1:y=i[7];
default: y=1'b Z;
endcase


end
endmodule







module mux_tb(;
reg [7:0]i;
reg [2:0]s;
wire y;
mux u1(i,s,y);
initial
begin
i= 8b10110110;
IT
3b000;
#10s = 3'b001;
#10s = 3'b010;
#10s = 3'b011;
#10s = 3b100;
#10s = 3b101;
#10s = 3'b101;
#10s = 3b110;
#10s = 3'b111;
#10Â $finish;
end






`timescale 1ns / 1ps

module mux_tb;

    // Inputs
    reg [7:0] i;      // 8-bit input
    reg [2:0] s;      // 3-bit select signal
    
    // Output
    wire y;           // Output of the multiplexer
    
    // Instantiate the 8-to-1 multiplexer module
    mux u1 (
        .i(i), 
        .s(s), 
        .y(y)
    );

    // Test procedure
    initial begin
        // Initialize inputs
        i = 8'b10110110;  // Set the input vector
        s = 3'b000;       // Start with the first select input

        // Apply test vectors by changing the select signal
        #10 s = 3'b001;   // Test with select = 001
        #10 s = 3'b010;   // Test with select = 010
        #10 s = 3'b011;   // Test with select = 011
        #10 s = 3'b100;   // Test with select = 100
        #10 s = 3'b101;   // Test with select = 101
        #10 s = 3'b110;   // Test with select = 110
        #10 s = 3'b111;   // Test with select = 111
        
        #10 $finish;      // End the simulation
    end

endmodule
